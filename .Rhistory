#tosstable %>%
#  filter(TossResult >= (dice/6))
successes <- tosstable %>%
filter(TossResult >= (dice/6)) %>%
summarise(sum(Freq))
successes / trials
# vs the theoretical
pbinom(0:2, 6 * (1:3), 1 / 6, lower.tail = FALSE)
TossResult %>%
summarize(count())
# #-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-
firsttask <- sample(1:5, 2, replace=TRUE)
firsttask
task_a <- max(firsttask)
task_a
task_b <- min(firsttask)
task_b
while (TRUE) {
if (task_a == task_b) break
if (task_a != task_b)
print("keep tasking")
print(paste("task_a = ", task_a))
print(paste("task_b  = ", task_b))
nexttask <- sample(1:5, 1, replace=TRUE)
print(paste("nexttask = ", nexttask))
task_b <- nexttask + task_b
task_min <- min(task_a, task_b)
task_max <- max(task_a, task_b)
task_a <- task_max
task_b <- task_min
}
print("Dinner time!")
print(paste("It took ", task_a, " minutes"))
dinnerTime <- function()
{
firsttask <- sample(1:5, 2, replace=TRUE)
task_a <- max(firsttask)
task_b <- min(firsttask)
while (TRUE) {
if (task_a == task_b) break
if (task_a != task_b)
nexttask <- sample(1:5, 1, replace=TRUE)
task_b <- nexttask + task_b
task_min <- min(task_a, task_b)
task_max <- max(task_a, task_b)
task_a <- task_max
task_b <- task_min
}
return(task_a)
}
dinnerTime()
multipledinnerTimes <- replicate(10000, dinnerTime())
# multipledinnerTimes
min(multipledinnerTimes)
median(multipledinnerTimes)
mean(multipledinnerTimes)
max(multipledinnerTimes)
hist(multipledinnerTimes)
dinnerTime_fn <- function()
{
firsttask <- sample(1:5, 2, replace=TRUE)
task_a <- max(firsttask)
task_b <- min(firsttask)
while (TRUE) {
if (task_a == task_b) break
if (task_a != task_b)
nexttask <- sample(1:5, 1, replace=TRUE)
task_b <- nexttask + task_b
task_min <- min(task_a, task_b)
task_max <- max(task_a, task_b)
task_a <- task_max
task_b <- task_min
}
return(task_a)
}
dinnerTime_fn()
multipledinnerTimes <- replicate(10000, dinnerTime_fn())
# multipledinnerTimes
min(multipledinnerTimes)
median(multipledinnerTimes)
mean(multipledinnerTimes)
max(multipledinnerTimes)
hist(multipledinnerTimes)
multipledinnerTimes_fn <- function() {
multipledinnerTimes <- replicate(10000, dinnerTime_fn())
return(mean(multipledinnerTimes))
}
multipledinnerTimes_fn()
multipledinnerTimes_fn()
multipledinnerTimes_fn()
multipledinnerTimes_fn()
multipledinnerTimes_fn()
multipledinnerTimes_fn()
multipledinnerTimes_fn()
multipleMultiples <- replicate(1000, multipledinnerTimes_fn())
multipleMultiples <- replicate(2, multipledinnerTimes_fn())
# multipledinnerTimes
min(multipleMultiples)
median(multipleMultiples)
mean(multipleMultiples)
max(multipleMultiples)
hist(multipleMultiples)
multipleMultiples <- replicate(10, multipledinnerTimes_fn())
# multipledinnerTimes
min(multipleMultiples)
median(multipleMultiples)
mean(multipleMultiples)
max(multipleMultiples)
hist(multipleMultiples)
multipleMultiples <- replicate(100, multipledinnerTimes_fn())
# multipledinnerTimes
min(multipleMultiples)
median(multipleMultiples)
mean(multipleMultiples)
max(multipleMultiples)
hist(multipleMultiples)
multipledinnerTimes_fn <- function() {
multipledinnerTimes <- replicate(1000, dinnerTime_fn())
return(mean(multipledinnerTimes))
}
multipledinnerTimes_fn()
multipleMultiples <- replicate(100, multipledinnerTimes_fn())
# multipledinnerTimes
min(multipleMultiples)
median(multipleMultiples)
mean(multipleMultiples)
max(multipleMultiples)
hist(multipleMultiples)
multipleMultiples <- replicate(100, multipledinnerTimes_fn())
# multipledinnerTimes
min(multipleMultiples)
median(multipleMultiples)
mean(multipleMultiples)
max(multipleMultiples)
hist(multipleMultiples)
multipleMultiples <- replicate(100, multipledinnerTimes_fn())
# multipledinnerTimes
min(multipleMultiples)
median(multipleMultiples)
mean(multipleMultiples)
max(multipleMultiples)
hist(multipleMultiples)
multipledinnerTimes_fn <- function() {
multipledinnerTimes <- replicate(10000, dinnerTime_fn())
return(mean(multipledinnerTimes))
}
# a single iteration of the multiple runs function
multipledinnerTimes_fn()
# and multiple multiples
multipleMultiples <- replicate(100, multipledinnerTimes_fn())
# multipledinnerTimes
min(multipleMultiples)
median(multipleMultiples)
mean(multipleMultiples)
max(multipleMultiples)
hist(multipleMultiples)
multipledinnerTimes <- replicate(10000, dinnerTime_fn())
# multipledinnerTimes
min(multipledinnerTimes)
median(multipledinnerTimes)
mean(multipledinnerTimes)
max(multipledinnerTimes)
hist(multipledinnerTimes)
multipledinnerTimes_fn <- function() {
multipledinnerTimes <- replicate(10000, dinnerTime_fn())
return(mean(multipledinnerTimes))
}
# a single iteration of the multiple runs function
multipledinnerTimes_fn()
multipleMultiples <- replicate(100, multipledinnerTimes_fn())
# multipledinnerTimes
min(multipleMultiples)
median(multipleMultiples)
mean(multipleMultiples)
max(multipleMultiples)
hist(multipleMultiples)
summary(multipledinnerTimes)
multipledinnerTimes <- replicate(10000, dinnerTime_fn())
# summarizing multipledinnerTimes
summary(multipledinnerTimes)
hist(multipledinnerTimes)
# and multiple multiples
multipleMultiples <- replicate(100, multipledinnerTimes_fn())
# summarizing multipledinnerTimes
summary(multipleMultiples)
hist(multipleMultiples)
library(Lahman)
table(Master)
data(Master)
head(Master)
library(Lahman)
data(Master)
head(Master$debut)
?head
head(Master$debut, 100)
library(dplyr)
?as.Date
as.Date(Master$debut)
as.Date(Master$debut, "yyyy-mm-dd")
head(Master$debut, 100)
as.Date(Master$debut, "yyyy-mm-dd")
head(as.Date(Master$debut, "yyyy-mm-dd"), 100)
data(Master)
head(Master$debut, 100)
Master %>%
filter(debut < "1900-01-01") %>%
head(debut, 100)
Master %>%
debut_rfmt <- filter(debut < "1900-01-01") %>%
head(debut_rfmt, 100)
Master$debut_rfmt <- Master$debut
head(Master$debut_rfmt)
library(Lahman)
data(Master)
head(Master$debut, 100)
Master$debut_rfmt <- Master$debut
head(Master$debut_rfmt, 100)
Master$debut_rfmt <- Master$debut(as.Date, "%m/%d/%yyyy")
head(Master$debut_rfmt, 100)
as.Date(Master$debut_rfmt, "%yyyy-%mm-%dd" <- Master$debut(as.Date, "%m/%d/%yyyy")
head(Master$debut_rfmt, 100)
as.Date(Master$debut_rfmt, "%yyyy%mm%dd" <- Master$debut(as.Date, "%m/%d/%yyyy")
head(Master$debut_rfmt, 100)
as.Date(Master$debut_rfmt, "%yyyy%mm%dd") <- Master$debut(as.Date, "%m/%d/%yyyy")
head(Master$debut_rfmt, 100)
as.Date(Master$debut_rfmt, "%yyyy-%mm-%dd") <- Master$debut(as.Date, "%m/%d/%yyyy")
as.Date(Master$debut_rfmt, "%yyyy%mm%dd") <- Master$debut(as.Date, "%m/%d/%yyyy")
Master$debut_rfmt <- Master$debut(as.Date, "%yyyy/%mm/%dd")
head(Master$debut_rfmt, 100)
Master$debut_rfmt <- Master$debut(as.Date, "%m/%d/%yyyy")
head(Master$debut_rfmt, 100)
data(Master)
head(Master$debut, 100)
ls.str()
ls.str(Master$debut)
ls(Master$debut)
ls.str()
head(Master$debut, 20)
?strptime
Master$debut_rfmt <- strptime(as.character(Master$debut), "%d/%m/%Y")
Master$debut_rfmt_date <- format(Master$debut_rfmt, "%Y-%m-%d")
head(Master$debut_rfmt, 100)
head(Master$debut_rfmt_date, 100)
Master$debut_rfmt <- (as.Date(Master$debut), "%d/%m/%Y")
Master$debut_rfmt_date <- format(Master$debut_rfmt, "%Y-%m-%d")
Master$debut_rfmt <- (as.Date(Master$debut, "%d/%m/%Y"))
Master$debut_rfmt_date <- format(Master$debut_rfmt, "%Y-%m-%d")
head(Master$debut_rfmt, 100)
head(Master$debut_rfmt_date, 100)
library(Lahman)
data(Master)
ls.str()
head(Master$debut, 20)
Master$debut_rfmt <- (as.Date(Master$debut, "%d/%m/%Y"))
head(Master$debut_rfmt, 100)
library(Lahman)
data(Master)
ls.str()
head(Master$debut, 20)
Master$debut_rfmt <- (as.Date(Master$debut, "%d/%m/%Y"))
head(Master$debut_rfmt, 100)
Master$debut_rfmt <- (as.Date(Master$debut, "%m/%d/%Y"))
head(Master$debut_rfmt, 100)
Master$debut_rfmt[is.na(Master$debut_rfmt)] <- as.date(Master$debut[is.na(Master$debut_rfmt)])
Master$debut_rfmt[is.na(Master$debut_rfmt)] <- as.Date(Master$debut[is.na(Master$debut_rfmt)])
head(Master$debut_rfmt, 100)
head(Master$debut, 100)
data(Master)
ls.str()
head(Master$debut, 100)
Master$debut_rfmt <- (as.Date(Master$debut, "%m/%d/%Y"))
head(Master$debut_rfmt, 100)
Master$debut_rfmt[is.na(Master$debut_rfmt)] <- as.Date(Master$debut[is.na(Master$debut_rfmt)])
head(Master$debut_rfmt, 100)
ls.str()
data(Master)
ls.str()
head(Master$debut, 100)
head(finalGame, 100)
head(Master$finalGame, 100)
Master$finalGame_date <- (as.Date(Master$finalGame, "%m/%d/%Y"))
Master$finalGame_date[is.na(Master$finalGame_date)]
<- as.Date(Master$finalGame[is.na(Master$finalGame_date)])
Master$finalGame_date[is.na(Master$finalGame_date)] +
<- as.Date(Master$finalGame[is.na(Master$finalGame_date)])
Master$finalGame_date[is.na(Master$finalGame_date)] <- as.Date(Master$finalGame[is.na(Master$finalGame_date)])
head(Master$finalGame_date, 100)
head(Master$finalGame, 100)
Master$finalGame_date <- (as.Date(Master$finalGame, "%m/%d/%Y"))
Master$finalGame_date[is.na(Master$finalGame_date)] <- as.Date(Master$finalGame[is.na(Master$finalGame_date)])
head(Master$finalGame_date, 100)
head(Master$finalGame, 100)
Master$finalGame_date <- (as.Date(Master$finalGame, "%m/%d/%Y"))
Master$finalGame_date[is.na(Master$finalGame_date)] <-
as.Date(Master$finalGame[is.na(Master$finalGame_date)])
head(Master$finalGame_date, 100)
head(Master$finalGame, 100)
Master$finalGameDate <- (as.Date(Master$finalGame, "%m/%d/%Y"))
Master$finalGameDate[is.na(Master$finalGameDate)] <-
as.Date(Master$finalGame[is.na(Master$finalGameDate)])
head(Master$finalGameDate, 100)
# load the necessary packages
# data manipulation
library(tidyr)
library(dplyr)
# graphics
library(ggplot2)
library(scales)
# tables
#library(xtable)
install.packages(c("ggplot2", "rmarkdown", "scales"))
remove.packages("rmarkdown", lib="~/R/my_R_library")
install.packages("rmarkdown")
brewer.pal()
library(grDevices)
brewer.pal()
library(grDevices)
colors <- brewer.pal(4, "BuPu")
library(grDevices)
library(RColorBrewer)
colors <- brewer.pal(4, "BuPu")
display.brewer.all()
colors <- brewer.pal(4, "#16161D")
colors <- brewer.pal(4, #16161D)
colors <- brewer.pal(4, "BuPu")
eigengrau_palette <- c("#16161D", "#5b5b60", "#a1a1a4" "#e7e7e8")
eigengrau_palette_10 <- colorRampPalette(eigengrau_palette)
# 4 step eigengrau palette
eigengrau_palette <- c("#16161D", "#5b5b60", "#a1a1a4", "#e7e7e8")
eigengrau_palette_10 <- colorRampPalette(eigengrau_palette)
colorRampPalette(eigengrau_palette, 10)
pal <- colorRampPalette(eigengrau_palette, 10)
pal
eigengrau_palette <- c("#16161D", "#5b5b60", "#a1a1a4", "#e7e7e8")
pal <- colorRampPalette(eigengrau_palette)
pal(10)
eigengrau_palette <- c("#16161D", "#e7e7e8")
pal <- colorRampPalette(eigengrau_palette)
pal(10)
pal <- colorRampPalette(eigengrau_palette)
pal10 <- pal(10)
display.pal(pal10)
palette(pal10)
palette(pal10, col=10)
palette(pal10, 10)
palette("pal10")
palette("pal10", 10)
palette("pal10", col=10)
palette("default")
# 4 step eigengrau palette
eigengrau_palette <- c("#16161D", "#5b5b60", "#a1a1a4", "#e7e7e8")
eigengrau_palette <- c("#16161D", "#e7e7e8")
pal <- colorRampPalette(eigengrau_palette)
pal10 <- pal(10)
?display
display.brewer.all()
display.brewer.all
display.pal(pal10, sel=1:length(pal10), names=FALSE)
install.packages("plotKML")
library(plotKML)
install.packages("raster")
library(raster)
library(plotKML)
install.packages("zoo")
library(zoo)
library(plotKML)
library(xts)
pie(pie_data_10)
pie_data_10 <- c(10, 10, 10, 10, 10, 10, 10, 10, 10, 10)
pie(pie_data_10)
colors <- brewer.pal(10, "BuPu")
pie_data_10 <- c(10, 10, 10, 10, 10, 10, 10, 10, 10, 10)
pie(pie_data_10)
colors <- brewer.pal(10, "BuPu")
palette(colors)
pie_data_10 <- c(10, 10, 10, 10, 10, 10, 10, 10, 10, 10)
pie(pie_data_10)
palette(pal10)
pie_data_10 <- c(10, 10, 10, 10, 10, 10, 10, 10, 10, 10)
pie(pie_data_10)
eigengrau_palette <- c("#16161D", "#5b5b60", "#a1a1a4", "#e7e7e8")
eigengrau_palette <- c("#16161D", "#e7e7e8")
pal <- colorRampPalette(eigengrau_palette)
pal10 <- pal(10)
palette(pal10)
pie_data_10 <- c(10, 10, 10, 10, 10, 10, 10, 10, 10, 10)
pie(pie_data_10)
palette("pal10")
pie(pie_data_10, col = pal10)
eigengrau_palette <- c("#16161D", "#5b5b60", "#a1a1a4", "#e7e7e8")
eigengrau_palette <- c("#16161D", "#e7e7e8")
pal <- colorRampPalette(eigengrau_palette)
pal10 <- pal(10)
pie_data_10 <- c(10, 10, 10, 10, 10, 10, 10, 10, 10, 10)
pie(pie_data_10, col = pal10)
pie(pie_data_10, col = pal10)
eigengrau_palette <- c("#16161D", "#e7e7e8")
pal <- colorRampPalette(eigengrau_palette)
pal05 <- pal(5)
pie_data_05 <- c(5, 5, 5, 5, 5)
pie(pie_data_05, col = pal05)
pie_data_05 <- c(1, 2, 3, 4, 5)
pie(pie_data_05, col = pal05)
colors <- brewer.pal(10, "BuPu")
palette(colors)
library(grDevices)
colors <- brewer.pal(10, "BuPu")
palette(colors)
library(RColorBrewer)
colors <- brewer.pal(10, "BuPu")
colors <- brewer.pal(9, "BuPu")
palette(colors)
pie_data_10 <- c(10, 10, 10, 10, 10, 10, 10, 10, 10, 10)
pie_data_9 <- c(9, 9, 9, 9, 9, 9, 9, 9, 9)
pie(pie_data_9)
colors <- brewer.pal(9, "BuPu")
palette(colors)
pie_data_9 <- c(9, 9, 9, 9, 9, 9, 9, 9, 9)
pie(pie_data_9)
colors <- brewer.pal(9, "BuPu")
palette(colors)
pie_data_9 <- c(9, 9, 9, 9, 9, 9, 9, 9, 9)
pie(pie_data_9)
display.brewer.all()
# 4 step eigengrau palette
eigengrau_palette <- c("#16161D", "#5b5b60", "#a1a1a4", "#e7e7e8")
# 2 step eigengrau palette (from eigengrau to palest)
eigengrau_palette <- c("#16161D", "#e7e7e8")
pal <- colorRampPalette(eigengrau_palette)
pal10 <- pal(10)
pie_data_10 <- c(10, 10, 10, 10, 10, 10, 10, 10, 10, 10)
pie(pie_data_10, col = pal10)
eigengrau_palette <- c("#16161D", "#e7e7e8")
pal <- colorRampPalette(eigengrau_palette)
pal05 <- pal(5)
pie_data_05 <- c(5, 5, 5, 5, 5)
pie_data_05 <- c(1, 2, 3, 4, 5)
pie(pie_data_05, col = pal05)
shiny::runApp('C:/@data/GitHub/business_points/Rstats/busdata_app_v02')
runApp('C:/@data/GitHub/business_points/Rstats/busdata_app_v02')
shiny::runApp('C:/@data/GitHub/WorkInProgress/shiny_tester')
runApp('C:/@data/GitHub/WorkInProgress/shiny_tester')
runApp('C:/@data/GitHub/WorkInProgress/shiny_tester')
runApp('C:/@data/GitHub/WorkInProgress/shiny_tester')
runApp('C:/@data/GitHub/business_points/Rstats/busdata_app_v02')
runApp('C:/@data/GitHub/business_points/Rstats/busdata_app_v02')
runApp('C:/@data/GitHub/business_points/Rstats/busdata_app_v02')
runApp('C:/@data/GitHub/business_points/Rstats/busdata_app_v02')
runApp('C:/@data/GitHub/business_points/Rstats/busdata_app_v02')
runApp('C:/@data/GitHub/business_points/Rstats/busdata_app_v02')
runApp('C:/@data/GitHub/business_points/Rstats/busdata_app_v02')
runApp('C:/@data/GitHub/business_points/Rstats/busdata_app_v02')
shiny::runApp('C:/@data/GitHub/business_points/Rstats/busdata_app_v02')
runApp('C:/@data/GitHub/business_points/Rstats/busdata_app_v02')
runApp('C:/@data/GitHub/business_points/Rstats/busdata_app_v02')
runApp('C:/@data/GitHub/business_points/Rstats/busdata_app_v02')
runApp('C:/@data/GitHub/business_points/Rstats/busdata_app_v02')
runApp('C:/@data/GitHub/business_points/Rstats/busdata_app_v02')
runApp('C:/@data/GitHub/business_points/Rstats/busdata_app_v02')
runApp('C:/@data/GitHub/business_points/Rstats/busdata_app_v02')
runApp('C:/@data/GitHub/business_points/Rstats/busdata_app_v02')
runApp('C:/@data/GitHub/business_points/Rstats/busdata_app_v02')
runApp('C:/@data/GitHub/business_points/Rstats/busdata_app_v02')
runApp('C:/@data/GitHub/business_points/Rstats/busdata_app_v02')
runApp('C:/@data/GitHub/business_points/Rstats/busdata_app_v02')
runApp('C:/@data/GitHub/business_points/Rstats/busdata_app_v02')
runApp('C:/@data/GitHub/business_points/Rstats/busdata_app_v02')
runApp('C:/@data/GitHub/business_points/Rstats/busdata_app_v02')
library("choroplethr", lib.loc="~/R/my_R_library")
library("choroplethrMaps", lib.loc="~/R/my_R_library")
?admin1_choropleth
?get_admin_countries
??get_admin_countries
?admin1.map
?get_admin_countries
?choroplethrAdmin1
install.packages("choroplethrAdmin1")
library("choroplethrAdmin1", lib.loc="~/R/my_R_library")
?choroplethrAdmin1
??choroplethrAdmin1
library("choroplethr", lib.loc="~/R/my_R_library")
library("choroplethrMaps", lib.loc="~/R/my_R_library")
?choroplethrAdmin1
county_choropleth(df_pop_county)
# install and load the packages
# install.packages(c("choroplethr", "choroplethrMaps"))
library(choroplethr)
data(df_pop_county)
head(df_pop_county)
county_choropleth(df_pop_county)
data(df_county_demographics)
colnames(df_county_demographics)
df_county_demographics$value = df_county_demographics$per_capita_income
county_choropleth(df_county_demographics)
df_county_demographics$value = df_county_demographics$median_rent
county_choropleth(df_county_demographics)
county_choropleth(df_county_demographics, title = "Median Rent by County",
legend = "Median Rent ($)", num_colors = 6)
setwd("C:/@data/GitHub/LamsteinCensusMapping")
county_choropleth(df_county_demographics, title = "Median Rent by County: Idaho",
legend = "Median Rent ($)", num_colors = 6,
zoom = c("idaho"))
?county_choropleth
county_choropleth(df_county_demographics, title = "Median Rent by County: Idaho",
legend = "Median Rent ($)", num_colors = 6,
state_zoom = c("idaho"))
county_choropleth(df_county_demographics, title = "Median Rent by County: Idaho",
legend = "Median Rent ($)", num_colors = 6,
state_zoom = c("washington"))
county_choropleth(df_county_demographics, title = "Median Rent by County: Washington",
legend = "Median Rent ($)", num_colors = 6,
state_zoom = c("washington"))
